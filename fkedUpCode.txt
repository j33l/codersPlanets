game.js...

/* proj. JS(webGame) date: dec 2017
* last visit: dec 2018
*	cdr: zk n some members of team studity
*	4 fun n lea., ProsedurOrieantedProgramming approch
*	dev.'s contack email: zk@jptl.rf.gd
*/

var clk=1; // main func.'s
var clk1=1; // func.1's
var clk2=1; // func.2's
var selfun=0; // func. panel Selector

var riClk=1; // right
var leClk=1; //left
var upClk=1; // up
var doClk=1; // odwn

var runClk=1; // main func.'s
var runClk1=1; // func.1's
var runClk2=1; // func.2's

var curLoc=""; // ufo's location
var preImg=""; // previous loc. content
var curDeg=0; // ufo's degree
var avlLev=0; // available levels

var point=0;
var bg=1; // music on/off
var mnu=1; // three line menu on/off

var d = 0; //dim index
var allDims = []; //all dim.s of cur. lev.

// refreshing current level
function retryLev() {
	//	levSel();
	// initilizing all clocks/clicks
	clk=1;
	clk1=1;
	clk2=1;

	leClk=1;
	upClk=1;
	doClk=1;
	riClk=1;

	runClk=1;
	runClk1=1;
	runClk2=1;

	curDeg=0;
	point=0;

	d = 0;
	//allDims = NULL;
}
/* REFRANCE Function
function moveit(){
	var current = document.getElementById('22i').className;
	console.log(current);
	var change = current.substring(1,2);
	var putt = parseInt(change) -1;
	var neyu = 'i' + change + putt;
	console.log(neyu);

	document.getElementsByClassName(current)[0].classList.add(neyu);
	document.getElementsByClassName(current)[0].classList.remove(current);

	document.getElementsByClassName(neyu)[0].classList.add(current);
	document.getElementsByClassName(neyu)[0].classList.remove(neyu);
}
*/

// select main func. i/p panel
function selulm(){
	document.getElementById("mainFuntxt1").style.color="red";
	document.getElementById("mainFuntxt2").style.color="red";
	document.getElementById("Fun1txt1").style.color="blue";
	document.getElementById("Fun1txt2").style.color="blue";
	document.getElementById("Fun2txt1").style.color="blue";
	document.getElementById("Fun2txt2").style.color="blue";
	selfun=0;
}

// select func.1 i/p panel
function selulf1(){
	selfun=1;
	document.getElementById("mainFuntxt1").style.color="blue";
	document.getElementById("mainFuntxt2").style.color="blue";
	document.getElementById("Fun1txt1").style.color="red";
	document.getElementById("Fun1txt2").style.color="red";
	document.getElementById("Fun2txt1").style.color="blue";
	document.getElementById("Fun2txt2").style.color="blue";
}

// select func.2 i/p panel
function selulf2(){
	document.getElementById("mainFuntxt1").style.color="blue";
	document.getElementById("mainFuntxt2").style.color="blue";
	document.getElementById("Fun1txt1").style.color="blue";
	document.getElementById("Fun1txt2").style.color="blue";
	document.getElementById("Fun2txt1").style.color="red";
	document.getElementById("Fun2txt2").style.color="red";
	selfun=2;
}
/*    //for mobile application
function funChangerMain() {
	document.getElementById('mainFun').style.backgroundColor="black";
	document.getElementById('oneFun').style.backgroundColor="white";
	document.getElementById('twoFun').style.backgroundColor="white";
	//myElement.classList.remove("curFun");
	document.getElementById("ulMain").style.display="none";
	document.getElementById("ulF1").style.display="block";
	document.getElementById("ulF2").style.display="block";
}

function funChangerF1() {
	document.getElementById('mainFun').style.backgroundColor="white";
	document.getElementById('oneFun').style.backgroundColor="black";
	document.getElementById('twoFun').style.backgroundColor="white";

	document.getElementById("ulMain").style.display="block";
	document.getElementById("ulF1").style.display="none";
	document.getElementById("ulF2").style.display="block";
}

function funChangerF2() {
	document.getElementById('mainFun').style.backgroundColor="white";
	document.getElementById('oneFun').style.backgroundColor="white";
	document.getElementById('twoFun').style.backgroundColor="black";

	document.getElementById("ulMain").style.display="block";
	document.getElementById("ulF1").style.display="block";
	document.getElementById("ulF2").style.display="none";
}
*/

// three line menu buttons
function menuBut(){
	if(mnu==1){
		document.getElementById('menuCls').style.display = "block";
		mnu=0;
	}
	else if (mnu==0){
		document.getElementById('menuCls').style.display = "none";
		mnu=1;
	}
}

// user feedback taker !-not working
function feedbackme(){
	document.getElementById("fdbk").innerHTML="Thankyou!";
	var myWindow=window.open("https://www.thesitewizard.com/");
	myWindow.document.getElementById('')
}

// onload initilizer func.
function init() {
	selulm();  // default main i/p panel selector
	// to display and hide function i/p  panels
	  document.getElementById("ulMain").style.display="block";
		document.getElementById("ulF1").style.display="block";
		document.getElementById("ulF2").style.display="block";

}

function bgMusic(){
	if (bg==1){
		document.getElementById("bgAud").play();
		document.getElementById("onoff").innerHTML="on";
		bg=0;
	}
	else if (bg==0) {
		document.getElementById("bgAud").pause();
		document.getElementById("onoff").innerHTML="off";
		bg=1;
	}
}

function help() {
	window.alert("Welcome To Coder\'s Planet.\nUse your logic to grab all dimonds\nusing Blue UFO");
}

// for loop to check border
// for every level make saperate html page

function trapMaker(myid) {
	document.getElementById(myid).src="img/la.png";
}

function dimMaker(myid1) {
	document.getElementById(myid1).src="img/di.png";
	allDims[d++] = myid1;
	document.getElementById("maxPnt").innerHTML=allDims.length;
}

// moves ufo left
function moLeRun() {
	var ufoTile=curLoc;
	var tiTile="";
	var tiTileMid;
	var ufoTileMid=eval(ufoTile.substring(1,2)-1); //-leClk instad of -1
	ufoTile=ufoTile.substring(0,1)+ufoTileMid+"i";
	tiTileMid=eval(ufoTileMid+1);
	tiTile=ufoTile.substring(0,1)+tiTileMid+"i";
	var nxtTileMid=eval(ufoTileMid);
	var nxtTile=ufoTile.substring(0,1)+nxtTileMid+"i";
	console.log(nxtTile+"->nxtTileVar");
	console.log("tiTile"+tiTile);
	console.log("ufoTile->>>"+ufoTile);

	var mi=document.getElementById(nxtTile).src;
	console.log("nxtLINE->"+nxtTile);
	var miLen=mi.length;
	var miLenFi = miLen-10;
	var op=mi.substring(miLenFi,miLen);
	console.log("OOOOP->"+op);
	if(op !== "img/la.png"){
		document.getElementById(ufoTile).src="img/uf.png";
		document.getElementById(ufoTile).style.transform='rotate(270deg)';
		for (var o = 0; o < allDims.length; o++) {
			if (curLoc == allDims[o]) {
				document.getElementById(tiTile).src="img/di.png";
				document.getElementById(tiTile).style.transform='rotate(0deg)';
				console.log("333333333");
				break;
			}
			else {
				document.getElementById(tiTile).src="img/ti.png";
			}
		}
		curLoc=ufoTile;
		moveAud();
		console.log("ufoTile->>>"+ufoTile);
		console.log("curLoc->>>"+curLoc);
	}
	leClk++;
}

// moves ufo up
function moUpRun() {
	var ufoTile=curLoc;
	var tiTile="";
	var tiTileFst;
	var ufoTileFst=eval(ufoTile.substring(0,1)-1); //-upClk instd of -1
	ufoTile=ufoTileFst+ufoTile.substring(1,2)+"i";
	tiTileFst=eval(ufoTileFst+1);
	tiTile=tiTileFst+ufoTile.substring(1,2)+"i";

	var abvTileFst=eval(ufoTileFst);
	var abvTile=abvTileFst+ufoTile.substring(1,2)+"i";
	console.log(abvTile+"->abvTileVar");
	console.log("tiTile"+tiTile);
	console.log("ufoTile->>>"+ufoTile);

	var mi=document.getElementById(abvTile).src;
	console.log("abvLINE->"+abvTile);
	var miLen=mi.length;
	var miLenFi = miLen-10;
	var op=mi.substring(miLenFi,miLen);
	if(op !== "img/la.png"){
		document.getElementById(ufoTile).src="img/uf.png";
		for (var o = 0; o < allDims.length; o++) {
			if (curLoc == allDims[o]) {
				document.getElementById(tiTile).src="img/di.png";
				document.getElementById(tiTile).style.transform='rotate(0deg)';
				console.log("333333333");
				break;
			}
			else {
				document.getElementById(tiTile).src="img/ti.png";
			}
		}
		curLoc=ufoTile;
		moveAud();
		console.log("ufoTile->>>"+ufoTile);
		console.log("curLoc->>>"+curLoc);
	}
	upClk++;
}


// moves ufo down
function moDoRun() {
	var ufoTile=curLoc;
	var tiTile="";
	var tiTileFst;
	var ufoTileFst=eval( parseInt(ufoTile.substring(0,1)) +1 ); //-upClk instd of -1
	console.log("ufoTileFst__"+ufoTileFst);
	ufoTile=ufoTileFst+ufoTile.substring(1,2)+"i";
	tiTileFst=eval(ufoTileFst-1);
	tiTile=tiTileFst+ufoTile.substring(1,2)+"i";
	console.log(ufoTile);

	var bloTileFst=ufoTileFst;
	var bloTile=bloTileFst + ufoTile.substring(1,2) + "i";
	console.log(bloTile+"->bloTileVar");
	console.log("tiTile"+tiTile);
	console.log("ufoTile->>>"+ufoTile);

	var mi=document.getElementById(bloTile).src;
	console.log("bloLINE->"+bloTile);
	var miLen=mi.length;
	var miLenFi = miLen-10;
	var op=mi.substring(miLenFi,miLen);
	if(op !== "img/la.png"){
		document.getElementById(ufoTile).src="img/uf.png";
		document.getElementById(ufoTile).style.transform='rotate(180deg)';
		for (var o = 0; o < allDims.length; o++) {
			if (curLoc == allDims[o]) {
				document.getElementById(tiTile).src="img/di.png";
				document.getElementById(tiTile).style.transform='rotate(0deg)';
				console.log("333333333");
				break;
			}
			else {
				document.getElementById(tiTile).src="img/ti.png";
			}
		}
		curLoc=ufoTile;
		moveAud();
		console.log("ufoTile->>>"+ufoTile);
		console.log("curLoc->>>"+curLoc);
	}
	doClk++;
}


// moves ufo right
function moRiRun() {
	var ufoTile=curLoc;
	var tiTile="";
	var tiTileMid;
	var ufoTileMid=eval( parseInt(ufoTile.substring(1,2)) + 1); //-leClk instad of -1
	console.log("ri####"+ufoTileMid);
	ufoTile=ufoTile.substring(0,1)+ufoTileMid+"i";
	tiTileMid=eval(ufoTileMid-1);
	tiTile=ufoTile.substring(0,1)+tiTileMid+"i";
	var nxtTileMid=eval(ufoTileMid);
	var nxtTile=ufoTile.substring(0,1)+nxtTileMid+"i";
	console.log(nxtTile+"->nxtTileVar");
	console.log("tiTile"+tiTile);
	console.log("ufoTile->>>"+ufoTile);

	var mi=document.getElementById(nxtTile).src;
	console.log("nxtLINE->"+nxtTile);
	var miLen=mi.length;
	var miLenFi = miLen-10;
	var op=mi.substring(miLenFi,miLen);
	console.log("OOOOP->"+op);

	if(op !== "img/la.png"){
		document.getElementById(ufoTile).src="img/uf.png";
		document.getElementById(ufoTile).style.transform='rotate(90deg)';
		for (var o = 0; o < allDims.length; o++) {
			if (curLoc == allDims[o]) {
				document.getElementById(tiTile).src="img/di.png";
				document.getElementById(tiTile).style.transform='rotate(0deg)';
				console.log("333333333");
				break;
			}
			else {
				document.getElementById(tiTile).src="img/ti.png";
			}
		}
		curLoc=ufoTile;
		moveAud();
		console.log("ufoTile->>>"+ufoTile);
		console.log("curLoc->>>"+curLoc);
	}
	console.log("moRi"+"ufoTile"+ufoTile);
	riClk++;
}

// moves ufo forward
function moFwdRun() {
	if(curDeg==0){
		moUpRun();
	}
	if(curDeg==90){
		moRiRun();
	}
	if(curDeg==180){
		moDoRun();
	}
	if(curDeg==270){
		moLeRun();
	}
}

// rotate ufo anticlock wise
function moRlRun() {
	rtnccw();
}

// rotate ufo clock wise
function moRrRun() {
	rtncw();
}

// to grab dimonds !-not working
function moGrRun() {
	for (var o = 0; o < allDims.length; o++) {
		if (curLoc == allDims[o]) {
			point++;
			document.getElementById("pnt").innerHTML=point;
			grbAud();
			allDims[o] = "";
		}
	}
}

// user i/p indicator forward
function moFwd() {
	if (selfun==0) {
		document.getElementById("ul"+clk).src="img/up.png";
		clk++;
		//console.log(+selfun+"ul"+clk+selfun);
	}
	if (selfun==1) {
		document.getElementById("1ul"+clk1).src="img/up.png";
		clk1++;
	}
	if (selfun==2) {
		document.getElementById("2ul"+clk2).src="img/up.png";
		clk2++;
	}
}

// user i/p indicator rotate left
function moRl() {
	if(selfun==0){
		document.getElementById("ul"+clk).src="img/rl.png";
		clk++;
	}
	if (selfun==1) {
		document.getElementById("1ul"+clk1).src="img/rl.png";
		clk1++;
	}
	if (selfun==2) {
		document.getElementById("2ul"+clk2).src="img/rl.png";
		clk2++;
	}
}

// user i/p indicator rotate right
function moRr() {
	if(selfun==0){
		document.getElementById("ul"+clk).src="img/rr.png";
		clk++;
	}
	if (selfun==1) {
		document.getElementById("1ul"+clk1).src="img/rr.png";
		clk1++;
	}
	if (selfun==2) {
		document.getElementById("2ul"+clk2).src="img/rr.png";
		clk2++;
	}
}

// user i/p indicator grabbing !-not working
function moGr() {
	document.getElementById("ul"+clk).src="img/gr.png";
	clk++;
}

// user i/p indicator func.1
function moF1() {
	if(selfun==0){
		document.getElementById("ul"+clk).src="img/f1.png";
		clk++;
	}
	if (selfun==1) {
		document.getElementById("1ul"+clk1).src="img/f1.png";
		clk1++;
	}
	if (selfun==2) {
		document.getElementById("2ul"+clk2).src="img/f1.png";
		clk2++;
	}
}

// user i/p indicator func.2
function moF2() {
	if(selfun==0){
		document.getElementById("ul"+clk).src="img/f2.png";
		clk++;
	}
	if (selfun==1) {
		document.getElementById("1ul"+clk1).src="img/f2.png";
		clk1++;
	}
	if (selfun==2) {
		document.getElementById("2ul"+clk2).src="img/f2.png";
		clk2++;
	}
}

function rtncw() {
	if(curDeg==0) {
		document.getElementById(curLoc).style.transform='rotate(90deg)';
		curDeg=90;
	}
	else if(curDeg==90) {
		document.getElementById(curLoc).style.transform='rotate(180deg)';
		curDeg=180;
	}
	else if(curDeg==180) {
		document.getElementById(curLoc).style.transform='rotate(270deg)';
		curDeg=270;
	}
	else if(curDeg==270) {
		document.getElementById(curLoc).style.transform='rotate(0deg)';
		curDeg=0;
	}
}

function rtnccw() {
	if(curDeg==0) {
		document.getElementById(curLoc).style.transform='rotate(270deg)';
		curDeg=270;
	}
	else if(curDeg==90) {
		document.getElementById(curLoc).style.transform='rotate(0deg)';
		curDeg=0;
	}
	else if(curDeg==180) {
		document.getElementById(curLoc).style.transform='rotate(90deg)';
		curDeg=90;
	}
	else if(curDeg==270) {
		document.getElementById(curLoc).style.transform='rotate(180deg)';
		curDeg=180;
	}
}

function grbAud(){
	document.getElementById("grbAud").play();
}

function moveAud(){
	document.getElementById("grbAud").play();
}

levels.js...


var curLev;
var rowG=0,colG=0; // global row n column vals

// level structure maker
function levMkr(row,col) {
  var matrix = "";
  //matrix = NULL; !-not working,not needed
  var i,j;
  rowG=row;
  colG=col;
  //matrix += `<table id="dsp">`;
  for(i=1;i<=row;i++) {
    matrix += `<tr>`;

    for(j=1;j<=col;j++) {
      matrix += `<td>
                  <img src="img/ti.png" id="`;
      matrix +=	""+i+""+j +"i";
      matrix +=	`" />
                </td>`;
    }
    matrix += `</tr>`;
  }
  //matrix += `</table>`;
  document.getElementById("dsp").innerHTML = matrix;
  document.getElementById(curLoc).src="img/uf.png";
  document.getElementById(curLoc).style.transform=`rotate(`+curDeg+`deg)`;
}

// user input number changer
function ulMkr(numb,dId) { // MAX(numb)=15 because of runUl()
  var matrix = "";
  var i;
  for(i=1;i<=numb;i++) {
		matrix += `<img id="`;
    if (dId == "ulF1") {
      matrix +=	"1ul"+i;
    }
    else if (dId == "ulF2") {
      matrix +=	"2ul"+i;
    }
    else {
		   matrix += "ul"+i;
    }
    matrix += `" src="img/ti.png" />`;
  }
  if (dId == "ulF1") {
    document.getElementById("f1t").innerHTML = numb;
  }
  else if (dId == "ulF2") {
    document.getElementById("f2t").innerHTML = numb;
  }
  else {
    document.getElementById("mt").innerHTML = numb;
  }
  document.getElementById(dId).innerHTML = matrix;
}

function levSel () {
  try {
    retryLev();
    var l = "lev"+document.getElementById("levIp").value+""+document.getElementById("stgIp").value;
    eval(l+"()");
  }
  catch {
    //window.alert(`"Invalid Input \n available levels from 1 to `+avlLev+`."`);
  }
}

/* old levChanger,before dynamic level structure implimantation
function levChanger() {
  // initilizing game display
  for(var i=1;i<=5;i++){
    for(var j=1;j<=5;j++){
      var preI=i+"";
      var preJ=j+"";
      var tid= preI+preJ+'i';
      document.getElementById(tid).src="img/ti.png";
    }
  }
  // initilizing user i/ps display
  // !-not refreshing func.1,2's i/ps
  for(var k=1;k<=15;k++){
    var tul="ul"+k;
    document.getElementById(tul).src="img/ti.png";
    document.getElementById(tul).src="img/ti.png";
    document.getElementById(tul).src="img/ti.png";
  }
  // ufo location
  document.getElementById(curLoc).src="img/uf.png";
}
*/

//##################################tbc###########################
// for user level making functining
function getVal() {
  var rowL = document.getElementById("rowIp").innerHTML;
  var colL = document.getElementById("colIp").innerHTML;

}

newLev.js...

/* structure to make new levels
function lev<levNumber><stageCharector> () {
  curLev=lev<levNumber>;
  avlLev=curLev; //no change
  curLoc="32i"; //ufo location
  curDeg=0; //ufo degree

  levMkr(7,7); //level size
  ulMkr(12,"ulMain"); //main function input number
  ulMkr(0,"ulF1"); //function2 input number
  ulMkr(0,"ulF2"); //function1 input number

  trapMaker("11i"); //trap maker

	dimMaker("56i"); //dimond maker
}
*/

function lev0B() { //for test
  curLev=0;
  avlLev++;
  curLoc="22i";
  curDeg=90;

  //levChanger();
  levMkr(6,5);
  ulMkr(5,"ulMain");
  ulMkr(5,"ulF1");
  ulMkr(5,"ulF2");

  trapMaker("11i");
  trapMaker("12i");
  trapMaker("13i");
  trapMaker("14i");
	trapMaker("15i");
  trapMaker("21i");
  trapMaker("25i");
  trapMaker("31i");
  trapMaker("32i");
  trapMaker("33i");
  trapMaker("35i");
  trapMaker("41i");
  trapMaker("42i");
  trapMaker("43i");
  trapMaker("45i");
  trapMaker("51i");
  trapMaker("55i");
  trapMaker("61i");
  trapMaker("62i");
  trapMaker("63i");
  trapMaker("64i");
  trapMaker("65i");
	dimMaker("23i");
	dimMaker("52i");
}


function lev1B() {
  curLev=1;
  avlLev++;
  curLoc="34i";
  curDeg=270;

  //levChanger();
  levMkr(4,4);
  ulMkr(4,"ulMain");
  ulMkr(0,"ulF1");
  ulMkr(0,"ulF2");

  trapMaker("11i");
  trapMaker("12i");
	trapMaker("13i");
	trapMaker("14i");
  trapMaker("21i");
  trapMaker("22i");
  trapMaker("23i");
  trapMaker("24i");
  trapMaker("41i");
  trapMaker("42i");
  trapMaker("43i");
  trapMaker("44i");
	dimMaker("31i");
}

function lev2B() {
  curLev=2;
  avlLev++;
  curLoc="25i";
  curDeg=270;

  //levChanger();
  levMkr(5,5);
  ulMkr(8,"ulMain");
  ulMkr(0,"ulF1");
  ulMkr(0,"ulF2");

  trapMaker("11i");
  trapMaker("12i");
  trapMaker("13i");
  trapMaker("14i");
	trapMaker("15i");
  trapMaker("21i");
  trapMaker("31i");
  trapMaker("33i");
  trapMaker("34i");
  trapMaker("35i");
  trapMaker("41i");
  trapMaker("43i");
  trapMaker("44i");
  trapMaker("45i");
  trapMaker("51i");
  trapMaker("52i");
  trapMaker("53i");
  trapMaker("54i");
  trapMaker("55i");
	dimMaker("23i");
	dimMaker("42i");
}

function lev3B() {
  curLev=3;
  avlLev++;
  curLoc="22i";
  curDeg=90;

  //levChanger();
  levMkr(6,5);
  ulMkr(11,"ulMain");
  ulMkr(0,"ulF1");
  ulMkr(0,"ulF2");

  trapMaker("11i");
  trapMaker("12i");
  trapMaker("13i");
  trapMaker("14i");
	trapMaker("15i");
  trapMaker("21i");
  trapMaker("25i");
  trapMaker("31i");
  trapMaker("32i");
  trapMaker("33i");
  trapMaker("35i");
  trapMaker("41i");
  trapMaker("42i");
  trapMaker("43i");
  trapMaker("45i");
  trapMaker("51i");
  trapMaker("55i");
  trapMaker("61i");
  trapMaker("62i");
  trapMaker("63i");
  trapMaker("64i");
  trapMaker("65i");
	dimMaker("24i");
	dimMaker("52i");
}

function lev4B() {
  curLev=4;
  avlLev++;
  curLoc="32i";
  curDeg=0;

  //levChanger();
  levMkr(7,7);
  ulMkr(12,"ulMain");
  ulMkr(0,"ulF1");
  ulMkr(0,"ulF2");

  trapMaker("11i");
  trapMaker("12i");
  trapMaker("13i");
  trapMaker("14i");
	trapMaker("15i");
  trapMaker("16i");
  trapMaker("17i");

  trapMaker("21i");
  trapMaker("27i");

  trapMaker("31i");
  trapMaker("33i");
  trapMaker("35i");
  trapMaker("37i");

  trapMaker("41i");
  trapMaker("43i");
  trapMaker("44i");
  trapMaker("45i");
  trapMaker("47i");

  trapMaker("51i");
  trapMaker("53i");
  trapMaker("54i");
  trapMaker("55i");
  trapMaker("57i");

  trapMaker("61i");
  trapMaker("63i");
  trapMaker("64i");
  trapMaker("65i");
  trapMaker("67i");

  trapMaker("71i");
  trapMaker("72i");
  trapMaker("73i");
  trapMaker("74i");
  trapMaker("75i");
  trapMaker("76i");
  trapMaker("77i");

	dimMaker("24i");
	dimMaker("56i");
}

/*
function graberFun(var ufoTile,var nxtTile) {
  var nxtSrc=document.getElementById(nxtTile).src;
  var nxtImg=nxtSrc.substring(nxtSrc.length-6,nxtSrc.length);
  var funClk;
  var ulId;
  switch (curFun) {
    case 1:
      funClk=runClk1;
      ulId="ul";
      break;
    case 2:
      funClk=runClk2;
      ulId="2ul";
      break;
    default:
      funClk=runClk;
      ulId="ul";
  }
  var ulSrc=document.getElementById(`ulId+funClk`).src;
  var ulImg=ulSrc.substring(ulSrc.length-6,ulSrc.length);
  if (nxtImg !== "la.png" && nxtImg !== "di.png") {
    document.getElementById(nxtTile).src="uf.png";
		document.getElementById(nxtTile).style.transform='rotate(270deg)';
		document.getElementById(tiTile).src="ti.png";
		curLoc=nxtTile;
		moveAud();
  }
  else if(nxtImg !== "la.png" && nxtImg === "di.png" && ulImg !== "gr.png") {
    document.getElementById(nxtTile).src="uf.png";
    document.getElementById(nxtTile).style.transform='rotate(270deg)';
    document.getElementById(tiTile).src="ti.png";
    preImg=ufo;
    curLoc=nxtTile;
    moveAud();
  }
}

function1 moLeRun () {
  var ufoTile = curLoc; // current id
  var ufoTileMid = eval(ufoTile.substring(1,2)); // col. no.
  // nxt tile id
  var nxtTile = eval(ufoTile.substring(0,1))+eval(ufoTile.substring(1,2)-1)+"i";
  graberFun(ufoTile,nxtTile); // string ids
}
*/

ulmf.js...

/* utilized code !0not working
function runUl(var myFun=0) {
	var ipNumb="";
	var funClk=0;
	var funMou="";

	if(myFun==2) {
		ipNumb="f2t";
		funClk=runClk2;
		funMou ="2ul";
		selfun=2;
	}
	else if (myFun==1) {
		ipNumb="f1t";
		funClk=runClk1;
		funMou ="1ul";
		selfun=1;
	}
	else {
		ipNumb="mt";
		funClk=runClk;
		funMou ="ul";
		selfun=0;
	}
	var ulNumb=document.getElementById(ipNumb).innerHTML;
	console.log(ulNumb);
	if (funClk <= ulNumb) {
		var mou = funMou+""+ funClk;
		var myUl=document.getElementById(mou).src;
		var myUlLen=myUl.length;
		var myUlLenFi=myUlLen-6;
		var myUlFi=myUl.substring(myUlLenFi,myUlLen);

			if(myUlFi === 'f1.png'){
				runUl(1);
			}
			else if(myUlFi === 'f2.png'){
				runUlf2(2);
			}
			else if(myUlFi === 'up.png'){
				moFwdRun();
			}
			else if(myUlFi === 'rl.png'){
				moRlRun();
			}
			else if(myUlFi === 'rr.png'){
				moRrRun();
			}
			else if(myUlFi === 'gr.png'){
				moGrRun();
			}
			funClk++;
			setTimeout(runUl 500);
	}
	else {
		//runClk=funClk;
	}
}
*/

// main func. i/p Runner
// (NEW)
function runUl() {
	curFun=0;
	var ulMain=document.getElementById("mt").innerHTML;
	if (runClk <= ulMain) {
		var mou = "ul" + runClk;
		var myUl=document.getElementById(mou).src;
		var myUlLen=myUl.length;
		var myUlLenFi=myUlLen-10;
		var myUlFi=myUl.substring(myUlLenFi,myUlLen);

			if(myUlFi === 'img/f1.png'){
				runUlf1();
			}
			else if(myUlFi === 'img/f2.png'){
				runUlf2();
			}
			else if(myUlFi === 'img/up.png'){
				moFwdRun();
			}
			else if(myUlFi === 'img/rl.png'){
				moRlRun();
			}
			else if(myUlFi === 'img/rr.png'){
				moRrRun();
			}
			else if(myUlFi === 'img/gr.png'){
				moGrRun();
			}
			runClk++;
			setTimeout(runUl, 500);
	}
}

// func.1 i/p Runner
// compressed loops (NEW)
function runUlf1() {
	curFun=1;
	var ulF1=document.getElementById("f1t").innerHTML;
	if(runClk1 <= ulF1){
      var mou = "1ul" + runClk1;
      var myUl=document.getElementById(mou).src;
			document.getElementById(mou).style.border="10px";
    	var myUlLen=myUl.length;
    	var myUlLenFi=myUlLen-10;
    	var myUlFi=myUl.substring(myUlLenFi,myUlLen);

    		if(myUlFi === 'img/f1.png'){
    			runUlf1();
    		}
    		else if(myUlFi === 'img/f2.png'){
    			runUlf2();
    		}
    		else if(myUlFi === 'img/up.png'){
    			moFwdRun();
    		}
    		else if(myUlFi === 'img/rl.png'){
    			moRlRun();
    		}
    		else if(myUlFi === 'img/rr.png'){
    			moRrRun();
    		}
    		else if(myUlFi === 'img/gr.png'){
    			moGrRun();
    		}
    		runClk1++;
        setTimeout(runUlf1, 500);
  }
}

// func.2 i/p Runner
// (NEW)
function runUlf2() {
	curFun=2;
	var ulF2=document.getElementById("f2t").innerHTML;
	if (runClk2 <= ulF2) {
		var mou = "2ul" + runClk2;
		var myUl=document.getElementById(mou).src;
		var myUlLen=myUl.length;
		var myUlLenFi=myUlLen-10;
		var myUlFi=myUl.substring(myUlLenFi,myUlLen);

			if(myUlFi === 'img/f1.png'){
				runUlf1();
			}
			else if(myUlFi === 'img/f2.png'){
				runUlf2();
			}
			else if(myUlFi === 'img/up.png'){
				moFwdRun();
			}
			else if(myUlFi === 'img/rl.png'){
				moRlRun();
			}
			else if(myUlFi === 'img/rr.png'){
				moRrRun();
			}
			else if(myUlFi === 'img/gr.png'){
				moGrRun();
			}
			runClk2++;
			setTimeout(runUlf2, 500);
	}
}

game.html...


<!doctype html>
<head>
	<title>Coder's Planet</title>
	<link rel="icon" href="img/di.png">
	<link rel="stylesheet" type="text/css" href="css/game.css">
	<script language="php" src="php/game.php"></script>
	<script type="text/javascript" src="js/game.js"></script>
	<script type="text/javascript" src="js/levels.js"></script>
	<script type="text/javascript" src="js/newLev.js"></script>
	<script type="text/javascript" src="js/ulmf.js"></script>
	<!--needed feedback portals-->
</head>
<body onload="init()">
	<!--three line  menu bolck-->
	<div id="menuCls">
		<gh style="color:white;font-size:30px;">Setting</gh>
		<button onclick="menuBut()" value="X" id="clsbut" >X</button>
		<br>
		<button onclick="bgMusic()">Music:<oz id="onoff">on</oz></button>
		<button onclick="feedbackme()"><oz id="fdbk">Feedback</oz></button>
		<br>
		<h1 style="color:white;font-size:20px;">Developers</h1>
		<p>{;} jPatel email: zk@jptl.rf.gd</p>
		<p>{;} sSoni email: ***</p>
		<p>&lt;&#47;&gt; nShah email: ***</p> <!-- text: </> --->
	</div>

	<!-- header panel -->
	<div class="hPanel">
		<b>Coder's Planet</b>
		<img id="menuImg" src="img/menu.png" alt="menu" onclick="menuBut()">
	</div>

	<!--level sel-->
		<div class="levCh">
			<b>Planet:</b>
			<select type="dropdown" id="stgIp">
				<option value="B">The Basics</option>
				<option value="F">Functions</option>
				<option value="L">The Loop</option>
				<option value="C">CommingSoon</option>
			</select>
			<b>Area:</b>
			<input type="number" id="levIp" />
			<button onclick="levSel()">play</button>
			<button onclick="help()">help</button>
			<!--try arguments lev(3) , dropdown menu -->
		</div>

<!-- Game display panel -->
<div id="tableDiv">
		<table id="dsp">
			<!-- before Automation n dynamic structure according to level
	<tr>
			<td><img id="11i" src="img/ti.png"></td>
			<td><img id="12i" src="img/ti.png"></td>
			<td><img id="13i" src="img/ti.png"></td>
			<td><img id="14i" src="img/ti.png"></td>
			<td><img id="15i" src="img/ti.png"></td>
		</tr>
		<tr>
			<td><img id="21i" src="img/ti.png"></td>
			<td><img id="22i" src="img/ti.png"></td>
			<td><img id="23i" src="img/ti.png"></td>
			<td><img id="24i" src="img/ti.png"></td>
			<td><img id="25i" src="img/ti.png"></td>
		</tr>
		<tr>
			<td><img id="31i" src="img/ti.png"></td>
			<td><img id="32i" src="img/ti.png"></td>
			<td><img id="33i" src="img/ti.png"></td>
			<td><img id="34i" src="img/ti.png"></td>
			<td><img id="35i" src="img/ti.png"></td>
		</tr>
		<tr>
			<td><img id="41i" src="img/ti.png"></td>
			<td><img id="42i" src="img/ti.png"></td>
			<td><img id="43i" src="img/ti.png"></td>
			<td><img id="44i" src="img/ti.png"></td>
			<td><img id="45i" src="img/ti.png"></td>
		</tr>
		<tr>
			<td><img id="51i" src="img/ti.png"></td>
			<td><img id="52i" src="img/ti.png"></td>
			<td><img id="53i" src="img/ti.png"></td>
			<td><img id="54i" src="img/ti.png"></td>
			<td><img id="55i" src="img/ti.png"></td>
		</tr>
	-->
		</table>
</div>

	<zk>Your Score:</zk>
	<zk id="pnt">0</zk>
	<zk>/</zk>
	<zk id="maxPnt">0</zk>

<!-- user input Display panels -->
	<div id="ul_div">
		<!-- main func. input Display panel -->
				<hr />
				<jp id="mainFuntxt1">main(<as id="mt"></as>) {</jp> <br />
		<div id="ulMain" onclick="selulm()">
			<!-- now dynamic ulIp mkr
			<img id="ul1" src="img/ti.png">
			<img id="ul2" src="img/ti.png">
			<img id="ul3" src="img/ti.png">
			<img id="ul4" src="img/ti.png">
			<img id="ul5" src="img/ti.png">
			<img id="ul6" src="img/ti.png">
			<img id="ul7" src="img/ti.png">
			<img id="ul8" src="img/ti.png">
			<img id="ul9" src="img/ti.png">
			<img id="ul10" src="img/ti.png">
			<img id="ul11" src="img/ti.png">
			<img id="ul12" src="img/ti.png">
			<img id="ul13" src="img/ti.png">
			<img id="ul14" src="img/ti.png">
			<img id="ul15" src="img/ti.png">
		-->
		</div>
				<br />
				<jp id="mainFuntxt2"> } </jp>

	<!-- func.1 input Display panel -->
		<hr />
		<jp id="Fun1txt1">fun1(<as id="f1t"></as>) {</jp> <br />
		<div id="ulF1" onclick="selulf1()">
			<!--
			<img id="1ul1" src="img/ti.png">
			<img id="1ul2" src="img/ti.png">
			<img id="1ul3" src="img/ti.png">
			<img id="1ul4" src="img/ti.png">
			<img id="1ul5" src="img/ti.png">
			<img id="1ul6" src="img/ti.png">
			<img id="1ul7" src="img/ti.png">
			<img id="1ul8" src="img/ti.png">
			<img id="1ul9" src="img/ti.png">
			<img id="1ul10" src="img/ti.png">
			<img id="1ul11" src="img/ti.png">
			<img id="1ul12" src="img/ti.png">
			<img id="1ul13" src="img/ti.png">
			<img id="1ul14" src="img/ti.png">
			<img id="1ul15" src="img/ti.png">
		-->
		</div>
		<br />
		<jp id="Fun1txt2"> } </jp>

		<!-- func.2 input Display panel -->
		<hr />
		<jp id="Fun2txt1">fun2(<as id="f2t"></as>) {</jp>	<br />
		<div id="ulF2" onclick="selulf2()">
			<!--
			<img id="2ul1" src="img/ti.png">
			<img id="2ul2" src="img/ti.png">
			<img id="2ul3" src="img/ti.png">
			<img id="2ul4" src="img/ti.png">
			<img id="2ul5" src="img/ti.png">
			<img id="2ul6" src="img/ti.png">
			<img id="ul7" src="img/ti.png">
			<img id="2ul8" src="img/ti.png">
			<img id="2ul9" src="img/ti.png">
			<img id="2ul10" src="img/ti.png">
			<img id="2ul11" src="img/ti.png">
			<img id="2ul12" src="img/ti.png">
			<img id="2ul13" src="img/ti.png">
			<img id="2ul14" src="img/ti.png">
			<img id="2ul15" src="img/ti.png">
		-->
		</div>
		<br />
		<jp id="Fun2txt2"> } </jp>
	</div>
	<hr />

<!--input buttons-->
	<div class="ipbuts">
		<img id="ruBut" src="img/ru.png" onclick="runUl()">
		<img id="" src="img/bk.png" onclick="()">
		<img id="f1But" src="img/re.png" onclick="levSel()">
		<br>
		<img id="leBut" src="img/up.png" onclick="moFwd()">
		<img id="upBut" src="img/rl.png" onclick="moRl()">
		<img id="doBut" src="img/rr.png" onclick="moRr()">
		<!-- grab button !-not working -->
		<img id="riBut" src="img/gr.png" onclick="moGr()">
		<img id="grBut" src="img/f1.png" onclick="moF1()">
		<img id="grBut" src="img/f2.png" onclick="moF2()">
	</div>

<!-- audio files loader -->
	<div class="auds">
		<audio id="grbAud">
			<source src="aud/grabWav.wav" type="audio/wav">
		</audio>
		<audio id="movAud">
			<source src="aud/moveMp3.mp3" type="audio/mp3">
		</audio>
		<audio id="bgAud">
			<source src="aud/bgMp3.mp3" type="audio/mp3">
		</audio>
	</div>

</body>

